service: backend

frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  logs:
    restApi:
      level: ERROR
  runtime: python3.13
  region: ${opt:region, 'eu-central-1'}
  stage: ${opt:stage, 'development'}
  logRetentionInDays: 30
  environment:
    APP_ENVIRONMENT: ${self:provider.stage}
    TABLE_NAME: ${self:custom.tableName}
    AWS_USER_POOL_ID:
      Ref: CognitoUserPool
    AWS_USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ JobsAPITable, Arn ]
            - "Fn::Join": ['/', ["Fn::GetAtt": [ JobsAPITable, Arn ], 'index', '*']]
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
          Resource:
            - !GetAtt CognitoUserPool.Arn
        - Effect: Allow
          Action:
            - cognito-idp:AdminAddUserToGroup
          Resource:
            - !Sub
                - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
                - UserPoolId: !Ref CognitoUserPool


functions:
  API:
    handler: src.main.handle
    timeout: 10
    memorySize: 512
    events:
      # Public routes (no authorizer)
      - http:
          path: /api/v1/auth/{proxy+}
          method: any
          cors:
            origin: ${env:ALLOWED_ORIGINS}
            maxAge: 60
      
      - http:
          path: /api/v1/health
          method: get
          cors:
            origin: ${env:ALLOWED_ORIGINS}
            maxAge: 60

      - http:
          path: /docs
          method: get
          cors:
            origin: ${env:ALLOWED_ORIGINS}
            maxAge: 60

      - http:
          path: /openapi.json
          method: get
          cors:
            origin: ${env:ALLOWED_ORIGINS}
            maxAge: 60

      # Secured routes (with authorizer)
      - http:
          path: /{proxy+}
          method: any
          cors:
            origin: ${env:ALLOWED_ORIGINS}
            headers: "*"
              # - Authorization
            maxAge: 60
          authorizer:
            name: JobsAPIAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
            scopes:
              - aws.cognito.signin.user.admin
  # cron:
  #   handler: src.scraper.run
  #   events:
  #       - schedule: cron(10 03 * * ? *) #run at 03:10 (UTC) every day.


custom:
  pythonRequirements:
    dockerImage: public.ecr.aws/sam/build-python3.13:latest
    slim: false
    usePoetry: false
    fileName: requirements.txt
    noDeploy:
      - boto3
      - botocore
    pipCmdExtraArgs:
      - --platform
      - manylinux2014_x86_64
      - --implementation
      - cp
      - --python-version
      - "3.13"
      - "--only-binary=:all:"
      - --upgrade
      - pydantic
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-jobs-table

plugins:
  - serverless-python-requirements

resources:
  - ${file(resources/cognito.yml)} 
  - ${file(resources/dynamodb.yml)}